package com.jrp.pma.entities;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.SequenceGenerator;
import javax.validation.constraints.NotBlank;

import com.fasterxml.jackson.annotation.JsonIgnore;


@Entity
public class Project {

	/**
	 * map Java objects to DB tables
	 * using @GeneratedValue(strategy=GenerationType.AUTO)
	 * 
	 * @Id to tell Spring this is unique identifier
	 * 
	 *     This setup will create a mapping between Java object and a given table.
	 *     Each row of table will have a projectId, name, stage, description.
	 * 
	 *     JPA is part of Hibernate module within Spring and this is what allows us
	 *     to map between a DB table and a Java object.
	 * 
	 *     @GeneratedValue(strategy=GenerationType.AUTO) => Hibernate manages
	 *     incrementing project_id's and NOT the database
	 * 
	 * @GeneratedValue(strategy=GenerationType.AUTO) changed to IDENTITY to deal
	 *                                               with data.sql => Autogenerated
	 *                                               DB column numbering
	 * 
	 *                                               DOWNSIDE:
	 *                                               Using @GeneratedValue(strategy=GenerationType.IDENTITY)
	 *                                               causes us to loose some of the
	 *                                               Hibernate batching features.
	 *                                               i.e. Batch updates on 1000
	 *                                               records would be much much
	 *                                               slower. However, for this use
	 *                                               case just for transactional
	 *                                               data, we should not have an
	 *                                               issue.
	 */
	@Id
	@SequenceGenerator(name = "project_seq", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "project_seq")
	private long projectId;

	private String name;

	private String stage; // NOT STARTED, COMPLETED, IN PROGRESS

	private String description;
	
	@NotBlank(message="date cannot be empty")
	private Date startDate;
	
	@NotBlank(message="date cannot be empty")
	private Date endDate;

	@ManyToMany(cascade = { CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST,
			CascadeType.REFRESH }, fetch = FetchType.LAZY)

	/**
	 * Join table 'project_employee' to deal with many-to-many relationship between
	 * Project and Employee tables. Project foreign key for table 'project_employee'
	 * = project_id Employee foreign key for table 'project_employee' = employee_id
	 * 
	 */
	@JoinTable(name = "project_employee", joinColumns = @JoinColumn(name = "project_id"), inverseJoinColumns = @JoinColumn(name = "employee_id"))

	@JsonIgnore
	private List<Employee> employees;

	public List<Employee> getEmployees() {
		return employees;
	}

	public void setEmployees(List<Employee> employees) {
		this.employees = employees;
	}

	public Project() {

	}

	public Project(String name, String stage, String description) {
		super();
		this.name = name;
		this.stage = stage;
		this.description = description;
	}

	public long getProjectId() {
		return projectId;
	}

	public void setProjectId(long projectId) {
		this.projectId = projectId;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getStage() {
		return stage;
	}

	public void setStage(String stage) {
		this.stage = stage;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	// Convenience method
	public void addEmployee(Employee emp) {
		if (employees == null) {
			employees = new ArrayList<>();
		}
		employees.add(emp);
	}

	public Date getStartDate() {
		return startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	public Date getEndDate() {
		return endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}
}
