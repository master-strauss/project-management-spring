package com.jrp.pma.entities;

import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.SequenceGenerator;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.jrp.pma.validators.UniqueValue;


@Entity
public class Employee {
	/**
	 * map Java objects to DB tables
	 * using @GeneratedValue(strategy=GenerationType.AUTO)
	 * 
	 * @Id to tell Spring this is unique identifier
	 * 
	 *     This setup will create a mapping between Java object and a given table.
	 *     Each row of table will have a projectId, name, stage, description.
	 * 
	 *     JPA is part of Hibernate module within Spring and this is what allows us
	 *     to map between a DB table and a Java object.
	 * 
	 *     @GeneratedValue(strategy=GenerationType.AUTO) => Hibernate manages
	 *     incrementing employee_id's and NOT the database
	 * 
	 * @GeneratedValue(strategy=GenerationType.AUTO) changed to IDENTITY to deal
	 *                                               with data.sql => Autogenerated
	 *                                               DB column numbering
	 * 
	 *                                               DOWNSIDE:
	 *                                               Using @GeneratedValue(strategy=GenerationType.IDENTITY)
	 *                                               causes us to loose some of the
	 *                                               Hibernate batching features.
	 *                                               i.e. Batch updates on 1000
	 *                                               records would be much much
	 *                                               slower. However, for this use
	 *                                               case just for transactional
	 *                                               data, we should not have an
	 *                                               issue.
	 */
	@Id
	@SequenceGenerator(name = "employee_seq", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "employee_seq")
	private long employeeId;

	@NotBlank(message="*Must enter first name")
	@Size(min=2, max=20)
	private String firstName;

	@NotBlank(message="*Must enter last name")
	@Size(min=1, max=20)
	private String lastName;

	@NotBlank
	@Email(message="*Must be a valid email address")
	@UniqueValue
	private String email;

	/**
	 * Foreign key "project_id", in Employee table
	 */
	@ManyToMany(cascade = { CascadeType.DETACH, CascadeType.MERGE, CascadeType.PERSIST,
			CascadeType.REFRESH }, fetch = FetchType.LAZY)

	/**
	 * Join table 'project_employee' to deal with many-to-many relationship between
	 * Project and Employee tables. Project foreign key for table 'project_employee'
	 * = project_id Employee foreign key for table 'project_employee' = employee_id
	 * 
	 */
	@JoinTable(name = "project_employee", joinColumns = @JoinColumn(name = "employee_id"), inverseJoinColumns = @JoinColumn(name = "project_id"))

	@JsonIgnore
	private List<Project> projects;

	public List<Project> getProjects() {
		return projects;
	}

	public void setProjects(List<Project> projects) {
		this.projects = projects;
	}

	public Employee() {

	}

	public Employee(String firstName, String lastName, String email) {
		super();
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
	}

	public long getEmployeeId() {
		return employeeId;
	}

	public void setEmployeeId(long employeeId) {
		this.employeeId = employeeId;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

}
